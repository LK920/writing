# 토요지식회1 상세 정리 (2025.07.12)

## 발표 주제: FIRST 원칙 기반 테스트 코드 작성 경험

### 1. 서론
- **목적**: 테스트 코드 작성 시 겪은 문제와 FIRST 원칙(Fast, Independent, Repeatable, Self-Validating, Timely)을 연계하여 경험 공유.
- **발표자 경험**:
  - 테스트 주도 개발(TDD)에 익숙하지 않아, 컴파일 에러(빨간색 에러)로 초기 불편함 겪음.
  - 과제 수행 중 테스트 코드 작성과 실행의 중요성 깨달음.

### 2. FIRST 원칙별 경험과 교훈

#### 2.1 Timely (시기적절함)
- **문제**:
  - 프로덕션 코드를 먼저 작성한 후 테스트 코드를 작성하려면 귀찮음 발생.
  - 기능 구현 완료 후 테스트 코드 작성은 부담스러움.
- **해결**:
  - TDD 원칙에 따라 프로덕션 코드 작성 전 테스트 코드 작성 권장.
  - 테스트 코드 선작성으로 요구사항 명확화 및 구현 효율성 향상.
- **교훈**:
  - 테스트 코드를 먼저 작성하면 기능 구현 전 요구사항을 체계적으로 분석 가능.
  - 예: 블로그/콘텐츠에서 강조된 “기능 구현 후 테스트는 귀찮다”는 문장 반영.

#### 2.2 Self-Validating (자동 검증)
- **문제**:
  - 과거 회사에서 콘솔 출력이나 디버깅으로 결과 확인, 사람 눈으로 검증.
  - 예: 유저 ID가 1인지 콘솔로 확인 → 모호성 발생, 자동화 부족.
- **해결**:
  - 테스트 프레임워크(JUnit 등) 사용으로 사람 개입 없이 성공/실패 명확히 판단.
  - 자동화된 테스트로 모호성 제거, 신뢰도 향상.
- **교훈**:
  - 테스트 프레임워크를 통해 명확한 성공/실패 기준 설정.
  - 콘솔 출력 기반 검증은 비효율적이며 오류 가능성 높음.

#### 2.3 Repeatable (반복 가능)
- **문제**:
  - 테스트가 환경(예: PC)에 따라 간헐적으로 실패.
  - 예: “내 PC에서는 되는데요” 상황 발생.
- **해결**:
  - 단위 테스트에서 외부 의존(파일 시스템, 실제 DB, 외부 API) 배제.
  - 테스트 대역(목, 스터브) 사용으로 가벼운 구현체로 검증.
  - 통합/인수 테스트는 외부 의존 포함 가능, 단위 테스트는 독립적 환경 보장.
- **교훈**:
  - 외부 의존 제거로 어떤 환경에서도 동일한 결과 보장.
  - 예: 실제 DB 대신 목 객체로 데이터 조회/저장 테스트.

#### 2.4 Independent (독립성)
- **문제**:
  - 과제 제출 직전 전체 테스트 실행 시 에러 발생.
  - 원인: 인수 테스트에서 메모리 초기화 미흡, 모든 테스트가 동일 유저 ID(1번) 사용 → 데이터 오염.
  - 새벽 3~4시 코치 도움으로 문제 해결, 테스트 간 공유 데이터로 독립성 깨짐.
- **해결**:
  - 테스트 간 데이터 격리(예: 유저 ID를 1, 2, 3으로 다양화).
  - 메모리 초기화 또는 테스트별 독립 데이터 설정.
  - 테스트 실행 순서 변경에도 결과 보장, 테스트 간 호출 지양.
- **교훈**:
  - 테스트 독립성 보장 위해 공유 데이터 제거, 초기화 철저히 관리.
  - 예: 테스트마다 고유 유저 ID 사용 또는 메모리 클리어 메서드 추가.

#### 2.5 Fast (빠른 실행)
- **문제**:
  - 느린 테스트 실행은 개발 생산성 저하.
  - 예: 테스트 1회 실행에 5분 소요 시, 하루 몇 번 실행 어려움.
- **해결**:
  - 테스트 속도 최적화로 자주 실행 가능.
  - 중요 테스트 우선순위 설정, 불필요한 파라미터/임포트 정리.
  - 리팩토링으로 효율적인 테스트 코드 작성.
- **교훈**:
  - 빠른 테스트는 개발 비용 절감, 빈번한 실행 유도.
  - 예: 불필요 리소스 제거, 핵심 기능 테스트에 집중.

### 3. QnA 및 사례 공유
- **참석자 피드백**:
  - **세현**: 도커/컨테이너로 테스트 환경 구성 시 반복 가능성 향상.
  - **찬아**: 테스트 컨테이너 개념 질문.
    - 발표자: 명확히 설명 어려움, 추가 학습 필요.
  - **우영**: 포스트맨 테스트 시 메모리/캐시 잔재로 실패 사례.
    - 발표자: 메모리 초기화 문제로 테스트 실패 빈번, 주의 필요.
  - **유진**: 테스트마다 스프링 부트 새로 띄우기(비추천)로 독립성 보장.
    - 데이터베이스 클리어 메서드 추가로 독립성 유지 가능, 그러나 DB 변경 제약 고려.
  - **의영**: 테스트마다 테이블/레파지토리 객체 새로 생성으로 독립성 확보.
  - **인상**: 테이블 변경 제약으로 `@AfterEach`에서 테이블 초기화.
- **발표자 반응**:
  - 메모리 초기화 방법 학습: `@AfterEach`로 데이터 클리어 성공, 그러나 파라미터 학습 부족.
  - 다른 참석자 사례 공유로 다양한 해결법 학습, 구글링/ChatGPT 한계 보완.

### 4. 결론
- **발표 요약**:
  - FIRST 원칙(Timely, Self-Validating, Repeatable, Independent, Fast)을 과제 경험과 연계.
  - 테스트 코드 작성 시 컴파일 에러, 데이터 오염, 실행 속도 문제 해결.
  - 테스트 프레임워크, 독립성 보장, 외부 의존 제거 중요.
- **교훈**:
  - TDD로 요구사항 분석과 코드 품질 향상.
  - 테스트 독립성과 속도 최적화로 개발 효율성 증대.
  - 팀원 사례 공유로 문제 해결 방법 다양화.